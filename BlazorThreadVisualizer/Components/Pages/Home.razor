@page "/"
@using BlazorThreadVisualizer.Models
@inject ThreadService ThreadService
@inject ILogger<Home> _logger
@rendermode InteractiveServer

<div class="container">
    <h1>Thread Queue Simulator</h1>
    <button @onclick="RestartQueue">Restart Queue</button>
</div>

<div class="container">
    <div class="section">
        <h4>Running Thread</h4>
        @if (RunningThread != null)
        {
            <div class="running-thread">
                @RunningThread.Name
            </div>
        }
    </div>
    <div class="section queue">
        <h4>Queued Threads</h4>
        @foreach (var thread in QueuedThreads)
        {
            <div class="queued-thread">
                @thread.Name
            </div>
        }
    </div>
    <div class="section">
        <h4>Completed Threads</h4>
        @foreach (var thread in CompletedThreads)
        {
            <div class="completed-thread">
                @thread.Name
            </div>
        }
    </div>
</div>

@code {
    List<BlazorThread> Threads => ThreadService.GetThreads();
    BlazorThread? RunningThread => Threads.FirstOrDefault(t => t.Status == "running");
    List<BlazorThread> QueuedThreads => Threads.Where(t => t.Status == "queued").ToList();
    List<BlazorThread> CompletedThreads => Threads.Where(t => t.Status == "completed").ToList();

    protected override void OnInitialized()
    {
        ThreadService.OnChange += HandleStateChange;
        _logger.LogInformation("Subscribed to state changes");
    }

    void HandleStateChange()
    {
        _logger.LogInformation($"State changed event received in {nameof(Home)}");
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        ThreadService.OnChange -= HandleStateChange;
        _logger.LogInformation("Unsubscribed from state changes");
    }

    private void RestartQueue()
    {
        ThreadService.RestartQueue();
        _logger.LogInformation("Queue restart initiated");
    }
}
